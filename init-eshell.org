* 加载库
#+BEGIN_SRC emacs-lisp
  (require 'eshell)
  (require-and-install 'em-smart)
#+END_SRC
* 设置alias存储路径
#+BEGIN_SRC emacs-lisp
  (setq eshell-aliases-file (concat (filter-valid-file "~/emacs-init/" "d:/emacs-init/") "eshell-alias"))
#+END_SRC
* 设置命令提示符
#+BEGIN_SRC emacs-lisp
  ;; ;; 设置命令提示行为[登录名]:路径>
  ;; (setq eshell-prompt-function (lambda ()
  ;;    (concat
  ;;     "[" (user-login-name) "]"
  ;;     (abbreviate-file-name
  ;;      (eshell/pwd))
  ;;     (if
  ;;         (=
  ;;          (user-uid)
  ;;          0)
  ;;         "#" ">"))))
  ;; (setq eshell-prompt-regexp "^\[.+\]:[^#>]*[#>]")
#+END_SRC
* 其他设置
#+BEGIN_SRC emacs-lisp
    (setq eshell-where-to-jump 'begin)
    (setq eshell-review-quick-commands nil)
    (setq eshell-smart-space-goes-to-end t)
    (add-hook
     'eshell-mode-hook
     (lambda ()
       (setq pcomplete-cycle-completions nil)
       (require 'eshell-ido-pcomplete)))

    ;; change listing switches based on OS
    ;; (when (not (eq system-type 'windows-nt))
    ;;   (eshell/alias "ls" "ls --color -h --group-directories-first $*"))
#+END_SRC

* 自定义函数
** 定义clear函数
#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()  
    "clear the eshell buffer."  
    (interactive)  
    (let ((inhibit-read-only t))  
      (erase-buffer)))  
#+END_SRC
** 定义find-files一次打开多个文件
#+BEGIN_SRC emacs-lisp
  (defun eshell/find-files (&rest files)
    "使用find-file打开多个文件"
    (when (and (listp (car files))
               (eql 1 (length files)))
      (setq files (car files)))
    (dolist (file files)
      (find-file file)))
#+END_SRC
* provide features
#+BEGIN_SRC emacs-lisp
  (provide 'init-eshell)
#+END_SRC
