* 加载库
#+BEGIN_SRC emacs-lisp
  (require 'eshell)
  (require-and-install 'em-smart)
#+END_SRC
* 设置alias存储路径
#+BEGIN_SRC emacs-lisp
  (setq eshell-aliases-file (concat (filter-valid-file "~/emacs-init/" "d:/emacs-init/") "eshell-alias"))
#+END_SRC
* 设置命令提示符
#+BEGIN_SRC emacs-lisp
  ;; ;; 设置命令提示行为[登录名]:路径>
  ;; (setq eshell-prompt-function (lambda ()
  ;;    (concat
  ;;     "[" (user-login-name) "]"
  ;;     (abbreviate-file-name
  ;;      (eshell/pwd))
  ;;     (if
  ;;         (=
  ;;          (user-uid)
  ;;          0)
  ;;         "#" ">"))))
  ;; (setq eshell-prompt-regexp "^\[.+\]:[^#>]*[#>]")
#+END_SRC
* 其他设置
#+BEGIN_SRC emacs-lisp
    (setq eshell-where-to-jump 'begin)
    (setq eshell-review-quick-commands nil)
    (setq eshell-smart-space-goes-to-end t)
    (add-hook
     'eshell-mode-hook
     (lambda ()
       (setq pcomplete-cycle-completions nil)
       (require 'eshell-ido-pcomplete)))

  ;; (setq eshell-glob-case-insensitive t)    ;glob不区分大小写
  (setq eshell-error-if-no-glob t)    ;如果glob出现不匹配则认为出错，这和zsh是一样的，和bash不同
  ;; (setq eshell-cmpl-ignore-case t) ;在补全filename的时候不区分大小写
  ;; (setq eshell-history-size 10000) ;记录很多命令，方便直接调用
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
  (add-hook
   'eshell-mode-hook
   (lambda ()
     (setq pcomplete-cycle-completions nil)))

#+END_SRC

* 自定义函数
** 定义clear函数
#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()  
    "clear the eshell buffer."  
    (interactive)  
    (let ((inhibit-read-only t))  
      (erase-buffer)))  
#+END_SRC
** 定义find-files一次打开多个文件
#+BEGIN_SRC emacs-lisp
  (defun eshell/find-files (&rest args)
    (when (not (null args))
      "使用find-file打开多个文件"
      (mapc #'find-file (mapcar #'expand-file-name (eshell-flatten-list (reverse args))))))
#+END_SRC
** 定义eshell/c函数用于选择跳转到之前的哪个目录
#+BEGIN_SRC emacs-lisp
  (defun eshell/c ()
    "Quickly jump to previous directories."
    (eshell/cd (ido-completing-read "Jump to directory: "
                                    (delete-dups (ring-elements eshell-last-dir-ring)))))
#+END_SRC
** 定义eshell/r使用ido方式选择eshell历史
#+BEGIN_SRC emacs-lisp
  (defun eshell/r ()
    "use ido-style to read  eshell-history"
    (interactive)
    (let* ((index 0)
           (peng-ido-eshell-list nil)
           (end (point))
           (beg (save-excursion (eshell-bol) (point)))
           (input (buffer-substring beg end)))
      (while (<= index eshell-history-size)
        (add-to-list 'peng-ido-eshell-list (eshell-get-history index))
        (setq index (1+ index)))
      (setq peng-ido-eshell-list (delete-dups (reverse peng-ido-eshell-list)))
      (if (equal input "")
          (insert (ido-completing-read "Eshell-history: " peng-ido-eshell-list))
        (goto-char beg)
        (kill-line)
        (insert (ido-completing-read "Eshell-history: " peng-ido-eshell-list
                                     nil
                                     nil
                                     input)))))

#+END_SRC

** 定义eshell/c使用ido方式选择cd某个bookmark中的目录
#+BEGIN_SRC emacs-lisp
  (defun eshell/c ()
     "Quickly jump to bookmark directories."
     (require 'bookmark)
     (let* ((directory-bookmarks (remove-if-not (lambda (bookmark)
                                                  (file-directory-p (bookmark-get-filename bookmark))) bookmark-alist))
            (directory-bookmark-names (mapcar #'car directory-bookmarks))
            (directory-bookmark-name (ido-completing-read "Jump to directory: "
                                                          (delete-dups directory-bookmark-names)))
            (directory-bookmark-directory (bookmark-get-filename directory-bookmark-name)))
       (eshell/cd directory-bookmark-directory)))
#+END_SRC
** 定义eshell/open使用操作系统默认设置打开文件
#+BEGIN_SRC emacs-lisp
  (defun eshell/open (&rest args)
    "使用操作系统默认设置打开文件"
    (cond ((eq system-type 'windows-nt)
           (mapc (lambda (file)
                   "win32环境下打开file"
                   (w32-shell-execute "open" file)) (eshell-flatten-list (reverse args))))
          (t (error "暂不支持该类型的操作系统%s" system-type))))
#+END_SRC
* provide features
#+BEGIN_SRC emacs-lisp
  (provide 'init-eshell)
#+END_SRC
